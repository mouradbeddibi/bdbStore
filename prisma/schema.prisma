datasource db {
    provider  = "postgresql"
    url       = env("DATABASE_URL")
    directUrl = env("DATABASE_URL_UNPOOLED")
}

generator client {
    provider = "prisma-client-js"
}

model User {
    id            String          @id @default(cuid())
    name          String?
    role          UserRole        @default(BASIC)
    email         String          @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    // Optional for WebAuthn support
    Authenticator Authenticator[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Account {
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@id([provider, providerAccountId])
}

model Session {
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model VerificationToken {
    identifier String
    token      String
    expires    DateTime

    @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
    credentialID         String  @unique
    userId               String
    providerAccountId    String
    credentialPublicKey  String
    counter              Int
    credentialDeviceType String
    credentialBackedUp   Boolean
    transports           String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@id([userId, credentialID])
}

enum UserRole {
    ADMIN
    BASIC
}

model School {
    id            String   @id @default(cuid())
    name          String
    formattedName String   @unique()
    location      String?
    createdAt     DateTime @default(now())
    updatedAt     DateTime @updatedAt
    listes        Liste[]  @relation("SchoolListe")

    @@map("schools")
}

model Liste {
    id            String      @id @default(cuid())
    name          String
    formattedName String      @unique()
    schoolId      String
    price         Float       @default(0)
    school        School      @relation(fields: [schoolId], references: [id], onDelete: Cascade, name: "SchoolListe")
    listeItems    ListeItem[] @relation("ListeListeItem")
    isVisible     Boolean     @default(false) // Example field for visibility control
    createdAt     DateTime    @default(now())
    updatedAt     DateTime    @updatedAt

    @@map("listes")
}

model Product {
    id         String      @id @default(cuid())
    name       String
    price      Float
    stock      Int?
    createdAt  DateTime    @default(now())
    updatedAt  DateTime    @updatedAt
    categoryId String
    category   Category    @relation(fields: [categoryId], references: [id], onDelete: Cascade)
    image      String
    listeItems ListeItem[] @relation("ProductListeItem")
    OrderItem  OrderItem[]

    @@map("products")
}

model ListeItem {
    id        String   @id @default(cuid())
    listeName String // Use listeName instead of listeId
    productId String // Use productName instead of productId
    quantity  Int
    liste     Liste    @relation(fields: [listeName], references: [formattedName], onDelete: Cascade, name: "ListeListeItem")
    product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade, name: "ProductListeItem")
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@map("liste_items")
}

model Category {
    id            String    @id @default(cuid())
    name          String
    formattedName String    @unique()
    products      Product[]

    @@map("categories")
}

model Order {
    id          String      @id @default(cuid())
    orderNumber String      
    name        String
    phoneNumber String
    price       Float       @default(0)
    orderStatus OrderStatus @default(Pending)
    createdAt   DateTime    @default(now())
    updatedAt   DateTime    @updatedAt
    orderItems  OrderItem[]
}

model OrderItem {
    id        String   @id @default(cuid())
    orderId   String
    productId String
    quantity  Int
    order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
    product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
    createdAt DateTime @default(now())
    updatedAt DateTime @default(now())
}

enum OrderStatus {
    Confirmed
    Pending
    Delivered
    Processing
    Cancelled
    Ready_for_Delivery
}
