datasource db {
  provider  = "postgresql"
  url  	    = env("DATABASE_URL")
  
  directUrl = env("DATABASE_URL_UNPOOLED")
}

generator client {
    provider = "prisma-client-js"
}

model Product {
    id         String      @id @default(cuid())
    name       String
    price      Float
    stock      Int?
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt
    categoryId String
    category   Category @relation(fields: [categoryId], references: [id])
    image     String

    @@map("products")
}

model Category {
    id       String    @id @default(cuid())
    name     String
    products Product[]

    @@map("categories")
}


model User {
    id            String          @id @default(cuid())
    name          String?
    role          UserRole        @default(BASIC)
    email         String          @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    // Optional for WebAuthn support
    Authenticator Authenticator[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Account {
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@id([provider, providerAccountId])
}

model Session {
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model VerificationToken {
    identifier String
    token      String
    expires    DateTime

    @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
    credentialID         String  @unique
    userId               String
    providerAccountId    String
    credentialPublicKey  String
    counter              Int
    credentialDeviceType String
    credentialBackedUp   Boolean
    transports           String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@id([userId, credentialID])
}

enum UserRole {
    ADMIN
    BASIC
}
